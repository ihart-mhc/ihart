package ihart.pseudo{		import flash.display.MovieClip;    import flash.display.Sprite;    import flash.events.*;    import flash.net.XMLSocket;		/**	*  AbstractPseudoServer	*  @author Cleo Schneider	*  This simulator allows you to test	*  server implementations	* 	**/	public class AbstractPseudoServer extends Sprite{		/**		* Fields		**/		protected var w : int = 800;		protected var h : int = 500;		protected var socket: XMLSocket;		protected var blobHolder : Sprite;		//set up the socket with localhost, using port 5204		private var hostName:String = "localhost";//"138.110.8.61";        private var port:uint = 5204;					/**		* Constructor		**/		public function AbstractPseudoServer(){			trace("new pseudo server");			blobHolder = addChild(new Sprite()) as Sprite;			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				/**		* init function		**/		public function init() : void{			socket = new XMLSocket();            configureListeners(socket);            if (hostName && port) {                socket.connect(hostName, port);            }						createBlobs();		}				/**		* Configure all listeners for the socket		* close - what happens when the socket is closed		* connect - what happens when the socket connects to the server		* data - what to do with the data being sent across the server		* ioError - how to handle an io error		* progress - moniter the progress of a transfer		* security error - how to handle a security error		* For all listeners print out the name of the listener and the event,		* unless otherwised specified		**/		private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.CLOSE, closeHandler);            dispatcher.addEventListener(Event.CONNECT, connectHandler);            dispatcher.addEventListener(DataEvent.DATA, dataHandler);//dataHandler);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);        }				/**		* closeHandler		* trace the event		**/		private function closeHandler(event:Event):void {            trace("closeHandler: " + event);        }				/**		* connectHandler		* trace the event		**/        private function connectHandler(event:Event):void {            trace("connectHandler: " + event);        }				/**		* dataHandler		* do nothing, just send information		**/        private function dataHandler(event:DataEvent):void {	   	}				/**		* ioErrorHandler		* trace the event		**/        private function ioErrorHandler(event:IOErrorEvent):void {            trace("ioErrorHandler: " + event);        }				/**		* progressHandler		* trace the event		**/        private function progressHandler(event:ProgressEvent):void {            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);        }				/**		* progressHandler		* trace the event		**/        private function securityErrorHandler(event:SecurityErrorEvent):void {            trace("securityErrorHandler: " + event);        }				/**		* Create the blobs to send coordinates 		* and widths across the server		* Override in child class		**/		protected function createBlobs():void{			//override		}				/**		* When the boid is added to the stage		**/		protected function onAddedToStage(event : Event) : void		{			init();						removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			addEventListener(Event.ENTER_FRAME, step);		}				/**		* Update the blob		* Override in child Class		**/		protected function updateBlob():void{			//override		}				/**		* Step		* Every time the program refreshes		* do the following		* Override in child class		**/		protected function step(event : Event = null):void{			//override		}				/**		* Send		* Send the information across the server		**/		public function send(data:Object):void {            socket.send(data);        }	}}