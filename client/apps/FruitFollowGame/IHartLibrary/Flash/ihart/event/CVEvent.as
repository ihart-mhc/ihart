package ihart.event{	import flash.events.Event;		//Change resuming to be a property for event not for blob	//future make a resume for each event type	//		/**	* CVEvent	* @author Felicia Cordeiro 11/23/2010	* @author Cleo Schneider	* CVEvent extends the Event class as a new type of listener which listens	* for the information transmitted by the server	**/	public class CVEvent extends Event{				/**		* Fields		**/		private var cvData : CVEventData;		private var resuming: Boolean;/*		public static const SHELL : int = 0;		public static const HOLE : int = 1;		public static const FACE: int = 2;		public static const ALL_BLOBS : int = -1;*/		public static const SHELL_INT : int = 0;		public static const HOLE_INT : int = 1;		public static const FACE_INT: int = 2;		public static const ALL_BLOBS_INT : int = -1;		public static const EVENT_TYPES : Array = ["shell", "hole", "face"];		public static const SHELL : String = EVENT_TYPES[SHELL_INT];		public static const HOLE : String = EVENT_TYPES[HOLE_INT];		public static const FACE: String = EVENT_TYPES[FACE_INT];		public static const ALL_BLOBS : String = "all blobs";				/**		* Constructor		**/		public function CVEvent(type: String,  cvData : CVEventData,resuming:Boolean, bubbles:Boolean = false, cancelable: Boolean = false){						super( type, bubbles, cancelable);			this.cvData = cvData;			this.resuming=resuming;		}				/**		* Takes the type of event as an integer for a parameter, and		* gets the cooresponding type of event as a String		*		* return: the type of event as a String		**/		public static function getStringType(type:int) :String{			if(type==CVEvent.ALL_BLOBS_INT){				return "all blobs";			}				else if ( (type >= 0) && (type < EVENT_TYPES.length ))			{				return EVENT_TYPES[type];			}			else			{				return "";			}		}				/**		* Takes the type of event as a string for a parameter, and		* gets the cooresponding type of event as an integer		*		* return: the type of event as an integer or -10 for invalid input		**/		public static function getIntType(type:String) :int{			if(type==CVEvent.ALL_BLOBS){				return CVEvent.ALL_BLOBS_INT;			}				// otherwise, walk over the array			else			{				for ( var i : int = 0; i < EVENT_TYPES.length; i++ )				{					if ( EVENT_TYPES[i] == type )						return i;				}				// if we get here, didn't find the input, so it must be invalid				return -10;			}		}				/**		* Override the function clone 		* to provide specific functionality for CVEvent		**/		public override function clone() : Event{			return new CVEvent( type, cvData, bubbles, cancelable);		}				/**		* Override the toString function to provide 		* specific functionality for the CVEvent		**/		public override function toString() : String{			return ("Type = " + type + ", Bubbles = " + bubbles + ", Cancelable = " + cancelable);		}		/**		* Get x 		* return: xCoor of type Number		**/		public function getX(index : int) : Number {			return cvData.getX( type, index);		}				/**		* Get y		* return: yCoor of type Number		**/		public function getY(index : int) : Number {			return cvData.getY( type, index);		}				/**		* Get width		* return: width of type Number		**/		public function getWidth(index : int) : Number {			return cvData.getWidth( type, index);		}				/**		* Get height		* return: height of type Number		**/		public function getHeight(index : int) : Number {			return cvData.getHeight( type, index);		}		/**		* getNumBlobs		* Return the number of blobs associated with this type of event		**/		public function getNumBlobs() : int {			return cvData.getNum( type );		}				/**		* getBlob		* @return a new blob that holds all information pertinent to this blob		* Refrain from using this method if you are not planning on saving the		* information. 		**/		public function getBlob(index : int) : Blob{			//blob takes fields - EventType, x, y, width, height, isHole 			return cvData.getBlob( type, index);		}				public function isResuming() : Boolean{			return resuming;		}	}}