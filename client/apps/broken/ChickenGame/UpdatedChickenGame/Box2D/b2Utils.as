package com.jtuttle.box2d {	import Box2D.Collision.Shapes.b2CircleShape;	import Box2D.Collision.Shapes.b2PolygonShape;	import Box2D.Common.Math.b2Vec2;	import Box2D.Dynamics.Joints.b2RevoluteJoint;	import Box2D.Dynamics.Joints.b2RevoluteJointDef;	import Box2D.Dynamics.b2Body;	import Box2D.Dynamics.b2BodyDef;	import Box2D.Dynamics.b2DebugDraw;	import Box2D.Dynamics.b2FixtureDef;	import Box2D.Dynamics.b2World;		import flash.display.DisplayObject;		public class b2Utils {		public static function createBoxForCostume(guide:DisplayObject, type:uint, world:b2World):b2Body {			var box:b2PolygonShape = new b2PolygonShape();			box.SetAsBox((guide.width / 2) / b2Values.PX_RATIO, (guide.height / 2) / b2Values.PX_RATIO);						var fixtureDef:b2FixtureDef = new b2FixtureDef();			fixtureDef.shape = box;			fixtureDef.density = 1;			//fixtureDef.friction = 0.06;			fixtureDef.friction = 0.08;			fixtureDef.restitution = 0;						var bodyDef:b2BodyDef = new b2BodyDef();			bodyDef.position.Set(guide.parent.x / b2Values.PX_RATIO, guide.parent.y / b2Values.PX_RATIO);			bodyDef.type = type;						var body:b2Body = world.CreateBody(bodyDef);			body.CreateFixture(fixtureDef);						return body;		} 				public static function createBox(x:Number, y:Number, width:Number, height:Number, type:uint, world:b2World):b2Body {			var box:b2PolygonShape = new b2PolygonShape();			box.SetAsBox(width / b2Values.PX_RATIO, height / b2Values.PX_RATIO);						var fixtureDef:b2FixtureDef = new b2FixtureDef();			fixtureDef.shape = box;			fixtureDef.density = 1;			//fixtureDef.friction = 0.06;			fixtureDef.friction = 0.08;			fixtureDef.restitution = 0;						var bodyDef:b2BodyDef = new b2BodyDef();			bodyDef.position.Set(x / b2Values.PX_RATIO, y / b2Values.PX_RATIO);			bodyDef.type = type;						var body:b2Body = world.CreateBody(bodyDef);			body.CreateFixture(fixtureDef);						return body;		}				public static function createBall(x:Number, y:Number, radius:Number, type:uint, world:b2World):b2Body {			var ball:b2CircleShape = new b2CircleShape();			ball.SetRadius(radius / b2Values.PX_RATIO);						var fixtureDef:b2FixtureDef = new b2FixtureDef();			fixtureDef.shape = ball;			fixtureDef.density = 1;			fixtureDef.friction = 0.08;			fixtureDef.restitution = 0;						var bodyDef:b2BodyDef = new b2BodyDef();			bodyDef.position.Set(x / b2Values.PX_RATIO, y / b2Values.PX_RATIO);			bodyDef.type = type;						var body:b2Body = world.CreateBody(bodyDef);			body.CreateFixture(fixtureDef);						return body;		}}}