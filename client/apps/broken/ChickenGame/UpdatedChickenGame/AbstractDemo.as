/**		 *  *	AbstractDemo *	 *	@version 1.00 | Jul 2, 2009 *	@author Justin Windle | soulwire ltd *	@see http://blog.soulwire.co.uk *	 *	Released under the Creative Commons 3.0 license *	@see http://creativecommons.org/licenses/by/3.0/ *	 *	You can modify this script in any way you choose  *	and use it for any purpose providing this header  *	remains intact and the original author is credited *   **/ //Boid is used for this http://blog.soulwire.co.uk/laboratory/flash/as3-flocking-steering-behaviors
 package {	import ihart.soulwire.ai.Boid;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Vector3D;
	
	//import flash.display.Movieclip;  	/**	 * Demo	 * @author Cleo Schneider	 * Uses the Boid library	 */	public class AbstractDemo extends Sprite 	{		/**		* Fields		**/		protected var _boids : Vector.<Boid> = new Vector.<Boid>();		protected var _boidHolder : Sprite;		protected var _config : Object = {											minForce:3.0,											maxForce:6.0,											minSpeed:6.0,											maxSpeed:12.0,											minWanderDistance:10.0,											maxWanderDistance:100.0,											minWanderRadius:5.0,											maxWanderRadius:20.0,											minWanderStep:0.1,											maxWanderStep:0.9,											boundsRadius:250,											numBoids:120											};				/**		* Constructor		**/		public function AbstractDemo()		{			_boidHolder = addChild(new Sprite()) as Sprite;			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				/**		* Override the init function in child classes		**/		protected function init():void		{			// Init		}						/**		* Create Boid		* create one boid and add it to the scene		* @return: the created boid		**/		protected function createBoid() : Boid		{			var boid : Boid = new Boid();						setProperties(boid);			//boid.renderData = boid.createDebugShape(Math.random() * 0xFFFFFF, 4.0, 2.0); //boid.createBitmapShape(new Ghost(28, 24));  			
			//stuff taken from here http://www.actionscript.org/forums/archive/index.php3/t-257655.html
			//but it doesn't do anything!
			boid.renderData = new Egg();
						_boids.push(boid);			_boidHolder.addChild(boid.renderData);						return boid;		}				/**		* createBoids		* create as many boids as specified by the count		* @param: count		**/		protected function createBoids(count : int):void		{			for (var i : int = 0;i < count; i++)			{				createBoid();			}		}				/**		* setProperties		* set all the properties of one boid including:		* boid.edgeBehavior		* boid.maxForce		* boid.maxSpeed		* boid.wanderDistance		* boid.wanderRadius		* boid.wanderStep		* boid.boundsRadius		* boid.boundsCentre		* boid.x and boid.y		**/		protected function setProperties(boid : Boid) : void		{			boid.edgeBehavior = Boid.EDGE_BOUNCE;			boid.maxForce = random(_config.minForce, _config.maxForce);			boid.maxSpeed = random(_config.minSpeed, _config.maxSpeed);			boid.wanderDistance = random(_config.minWanderDistance, _config.maxWanderDistance);			boid.wanderRadius = random(_config.minWanderRadius, _config.maxWanderRadius);			boid.wanderStep = random(_config.minWanderStep, _config.maxWanderStep);			boid.boundsRadius = stage.stageWidth * 0.6;			boid.boundsCentre = new Vector3D(stage.stageWidth >> 1, stage.stageHeight >> 1, 0.0);						if(boid.x == 0 && boid.y == 0)			{				boid.x = boid.boundsCentre.x + random(-100, 100);				boid.y = boid.boundsCentre.y + random(-100, 100);				boid.z = random(-100, 100);								var vel : Vector3D = new Vector3D(random(-2, 2), random(-2, 2), random(-2, 2));				boid.velocity.incrementBy(vel);			}		}				/**		* random		* generate a random number between a min and max		* @param: min :int, max : int		* @ return: the random number generated by Math.random()		**/		protected function random( min : Number, max : Number = NaN ) : Number		{			if ( isNaN(max) )			{				max = min;				min = 0;			}						return Math.random() * ( max - min ) + min;		}				/**		* updateBoid		* override update boid for child classes		**/		protected function updateBoid(boid : Boid, index : int) : void		{			// Override		}		/**		* step		* every refresh update the boids		**/		protected function step(event : Event = null) : void		{			for (var i : int = 0;i < _boids.length; i++)			{				updateBoid(_boids[i], i);			}		}				/**		* onAddedToStage		* function for event listener Event.ADDED_TO_STAGE		* once added to the stage initialize everything		**/		protected function onAddedToStage(event : Event) : void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			addEventListener(Event.ENTER_FRAME, step);			init();		}	}}