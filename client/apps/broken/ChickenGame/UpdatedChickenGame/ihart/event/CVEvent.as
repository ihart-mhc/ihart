package ihart.event{	import flash.events.Event;		/**	* CVEvent	* @author Felicia Cordeiro 11/23/2010	* @author Cleo Schneider	* CVEvent extends the Event class as a new type of listener which listens	* for the information transmitted by the server	**/	public class CVEvent extends Event{				/**		* Fields		**/		private var cvData : CVEventData;		private var resuming: Boolean;		//the constants for the different types of blobs		public static const SHELL : String = "shell"; //0		public static const HOLE : String = "hole"; //1		public static const FACE: String = "face"; //2		public static const ALL_BLOBS : String = "all blobs"; //-1				public static const CV_TYPES : Array = [SHELL, HOLE, FACE]; //ALL_BLOBS is -1		/**		* Constructor that stores all the information about the event		*		* @param type The type of the event		* @param cvData The event data involved in the event		* @param resuming Whether or not the event is resuming		*		**/		public function CVEvent(type:String,  cvData : CVEventData,resuming:Boolean, bubbles:Boolean = false, cancelable: Boolean = false){						super(type, bubbles, cancelable);			this.cvData = cvData;			this.resuming=resuming;		}						/**		* Takes the type of event as a string for a parameter, and		* gets the cooresponding type of event as an integer		*		* @param type The type of the blob as String		*		* @return The type of event as an integer. 0 is shell, 1 is hole, 2 is face.		**/		public static function getIntType(type:String) :int{			// special case for ALL_BLOBS			if ( type == ALL_BLOBS )				return -1;			// otherwise, index of array			else			{				for ( var i : int = 0; i < CV_TYPES.length; i++ )				{ 					if ( type == CV_TYPES[i] )					{ 						return i;					}				}			}						// shouldn't ever get here			return -2;		}						/**		* Takes the type of event as an integer for a parameter, and		* gets the cooresponding type of event as a String		*		* @param type The type of the blob as an int		*		* @return The type of event as a String		**/				public static function getStringType(type:int) :String{			// special case for ALL_BLOBS			if ( type == -1 )				return ALL_BLOBS;			// otherwise, index into array			else if ( type >= 0 && type <= CV_TYPES.length -1 )			{				return CV_TYPES[type];			}						// shouldn't ever get here			return "";		}					/**		* Takes the type of event as a string for a parameter, and		* gets the cooresponding type of event as an integer		*		* @param type The type of the blob as String		*		* @return The type of event as an integer. 0 is shell, 1 is hole, 2 is face.		**/		/*public function getIntType(type:String) :int{			if(type=="all blobs"){				return CVEvent.ALL_BLOBS;			}				else if(type=="shell"){				return CVEvent.SHELL;			}			else if(type=="hole"){				return CVEvent.HOLE;			}			else if(type=="face"){				return CVEvent.FACE;			}			else{				return -10;			}		}		*/		/**		* Override the function clone 		* to provide specific functionality for CVEvent		**/		public override function clone() : Event{			return new CVEvent(type, cvData, bubbles, cancelable);		}				/**		* Override the toString function to provide 		* specific functionality for the CVEvent		**/		public override function toString() : String{			return ("Type = " + type + ", Bubbles = " + bubbles + ", Cancelable = " + cancelable);		}		/**		* Gets the xCoord of the center of the blob		* @return The xCoor of the center of the blob as type Number		**/		public function getX(index : int) : Number {			return cvData.getX(getIntType(type), index);		}				/**		* Gets the yCoor of the center of the blob		* @return The yCoor of the center of the blob as type Number		**/		public function getY(index : int) : Number {			return cvData.getY(getIntType(type), index);		}				/**		* Gets the width of the blob		* @return The width of the blob as type Number		**/		public function getWidth(index : int) : Number {			return cvData.getWidth(getIntType(type), index);		}				/**		* Gets the height of the blob		* @return The height of the blob as type Number		**/		public function getHeight(index : int) : Number {			return cvData.getHeight(getIntType(type), index);		}		/**		* Gets the number of blobs		* @return The number of blobs associated with this type of event		**/		public function getNumBlobs() : int {			return cvData.getNum( getIntType(type) );		}				/**		* Gets the blob at the specified index		*		* @param index The index of the blob to get		*		* @return The blob that holds all information pertinent to the blob at the specified index		**/		public function getBlob(index : int) : Blob{			return cvData.getBlob(getIntType(type), index);		}				/**		* Gets whethor or not the event is resuming		* @return Whether or not the event is resuming		**/		public function isResuming() : Boolean{			return resuming;		}	}}