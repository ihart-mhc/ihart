package ihart.event{	import flash.events.*;		/**	* CVEventData	* @author Felicia Cordeiro 11/23/2010	* @author Cleo Schneider	* CVEventData holds all data necessary for a blob event	**/	public class CVEventData{				/*		* The Fields		*/		private var eventData : Array;		private var blob : Blob;				/**		* Constructor that stores the event data		**/		public function CVEventData(eventData: Array){			this.eventData=eventData;		}		  		/**		* Finds the blob of the specified type and with the specified index and returns its x-coordinate		* 		* @param eventType The type of event at an integer 0 shell, 1 hole, 2 face -1 all blobs.		* @param index The index of the blob we are looking for		*		* @return The xCoor of the center of the blob as type Number		**/		public function getX(eventType : int, index : int) : Number {			blob=getBlob(eventType,index);			return blob.getX();		}				/**		* Finds the blob of the specified type and with the specified index and returns its y-coordinate		* 		* @param eventType The type of event at an integer 0 shell, 1 hole, 2 face -1 all blobs.		* @param index The index of the blob we are looking for		*		* @return The yCoor of the center of the blob as type Number		**/		public function getY(eventType : int, index : int) : Number {			blob=getBlob(eventType,index);			return blob.getY();		}				/**		* Finds the blob of the specified type and with the specified index and returns its width		* 		* @param eventType The type of event at an integer 0 shell, 1 hole, 2 face -1 all blobs.		* @param index The index of the blob we are looking for		*		* @return The width of the blob as type Number		**/		public function getWidth(eventType : int, index : int) : Number {			blob=getBlob(eventType,index);			return blob.getWidth();		}				/**		* Finds the blob of the specified type and with the specified index and returns its height		* 		* @param eventType The type of event at an integer 0 shell, 1 hole, 2 face -1 all blobs.		* @param index The index of the blob we are looking for		*		* @return The height of the blob as type Number		**/		public function getHeight(eventType : int, index : int) : Number {			blob=getBlob(eventType,index);			return blob.getHeight();		}		/**		* Gets the total number of blobs		* @return The total number of blobs as an integer		**/		public function getNumBlobs() : int{			return getNum(CVEvent.getIntType(CVEvent.ALL_BLOBS));		}				/**		* Gets the number of blobs of the specified type		* 		* @param eventType The type that we are getting the number of blobs of.		*		* @return The number of blobs of the specified eventType 		**/		public function getNum( eventType : int ) : int{			var eventTypeS : String = CVEvent.getStringType( eventType );			if(eventTypeS==CVEvent.ALL_BLOBS){				return eventData[0].length + eventData[1].length + eventData[2].length;			}						else if (eventTypeS==CVEvent.SHELL || eventTypeS==CVEvent.HOLE || eventTypeS==CVEvent.FACE){				return eventData[eventType].length;			}			return -1;		}				/**		* Gets the blob at the specified index of the specified type		*		* @param index The index of the blob to get		*		* @return The blob that holds all information pertinent to the blob at the specified index		**/		public function getBlob(eventType: int, index:int): Blob{			var eventTypeS : String = CVEvent.getStringType( eventType );			if(eventTypeS==CVEvent.ALL_BLOBS && index<eventData[0].length + eventData[1].length+ eventData[2].length){				if(index >= eventData[0].length){					if(index>=eventData[0].length + eventData[1].length){						return eventData[2][index - eventData[0].length - eventData[1].length];					}					else{						return eventData[1][index - eventData[0].length];					}				}				else{					return eventData[0][index];				}			}						else if(eventTypeS==CVEvent.SHELL || eventTypeS==CVEvent.HOLE || eventTypeS==CVEvent.FACE){				return eventData[eventType][index];			}						return null;		}	}}