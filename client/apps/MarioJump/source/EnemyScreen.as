// Main class.package  {	import flash.display.Stage;	import flash.display.MovieClip;	import flash.utils.Timer;	import ihart.event.*;	import flash.events.*;	public class EnemyScreen extends MovieClip {				// iHart		private var cvManager:CVManager;		private var hostname:String = "localhost";		private var port:int = 5204;				// Timer responsible for creating new monsters at random.		private var timer:Timer;				// Boxes		private var NUM_BOX:int = 14;		private var boxArray:Array = new Array();				// spawn rates:		private var MAX_NUM_MONSTERS:int = 2;		private var SPAWN_GOOMBA:Number = 0.50;		private var GOOMBA:int = 1;		private var SPAWN_KOOPA:Number = 0.40;		private var KOOPA:int = 2;		private var monsterArray:Array = new Array();				public function EnemyScreen() {			// iHart - comment out for mouse clicks.			cvManager = new CVManager(hostname, port);						// Initialize boxes.			hitBoxinit();						// create/start our timer			timer = new Timer(3000);			timer.addEventListener(TimerEvent.TIMER, runLoop);			timer.start();		}				private function runLoop(e:TimerEvent):void {			// main loop that runs this program...not really a loop, spoofed by a timer.			var randNum:Number = Math.random();						if (monsterArray.length < MAX_NUM_MONSTERS) {				if (randNum <= SPAWN_GOOMBA) {					spawnMonster(GOOMBA);				} else if (randNum <= (SPAWN_GOOMBA + SPAWN_KOOPA)) {					spawnMonster(KOOPA);				}			}		}				private function hitBoxinit(){			for (var i:int = 0; i < NUM_BOX; ++i) {				boxArray.push(new HitBox(this, cvManager));				boxArray[i].x = i * 50;				boxArray[i].y = 100;								addChild(boxArray[i]);			}		}				public function spawnMonster(monsterID:int):void {			var dirInt:Number;						if (monsterID == GOOMBA) {				// determine direction				dirInt = Math.random();				var m:Monster_Goomba;								if (dirInt <= 0.5) {					m = new Monster_Goomba(this, monsterArray.length, -50, 50, 1);				} else {					m = new Monster_Goomba(this, monsterArray.length, 750, 50, -1);				}								monsterArray.push(m);				addChild(m);			} else if (monsterID == KOOPA) {				// determine direction				dirInt = Math.random();				var k:Monster_Koopa;				if (dirInt <= 0.5) {					k = new Monster_Koopa(this, monsterArray.length, -50, 36, 1);				} else {					k = new Monster_Koopa(this, monsterArray.length, 750, 36, -1);				}								monsterArray.push(k);				addChild(k);			}		}				public function remove_Goomba(m:Monster_Goomba):void {			removeChild(monsterArray[monsterArray.indexOf(m, 0)]);			monsterArray.splice(monsterArray.indexOf(m), 1);		}				public function remove_Koopa(m:Monster_Koopa):void {			removeChild(monsterArray[monsterArray.indexOf(m, 0)]);			monsterArray.splice(monsterArray.indexOf(m), 1);		}				// Returns true if collide, false otherwise.		public function collide(box:HitBox):void {			for (var i:int = 0; i < monsterArray.length; ++i) {				if ( ((monsterArray[i].x + monsterArray[i].width) > box.x) && ((monsterArray[i].x + monsterArray[i].width) < (box.x + box.width)) ||					 (monsterArray[i].x > box.x) && (monsterArray[i].x < (box.x + box.width)) && !monsterArray[i].isDead() ){					monsterArray[i].gotoAndPlay(3);					monsterArray[i].monsterDestroyed();				} 			}		}	}}