package  {import flash.display.*;import flash.events.*;import flash.net.*;import flash.geom.Point;import flash.utils.Timer;import ihart.event.*;import fl.controls.CheckBox;		public class LightAndDark extends MovieClip{				var bitmapData:BitmapData;				var blackCover:Bitmap;		var theImage:Bitmap;				var header:Header = new Header();		var timer:GameTimer = new GameTimer();				var score:Score = new Score();		var rectangle:Shape = new Shape(); 				var strawberry:Strawberry = new Strawberry();		var lamp:Lamp = new Lamp();		var panda:Panda = new Panda();		var waldo:Waldo = new Waldo();				//the game manager object		var manager:GameManager;				var myCheck:CheckmarkFade;				//the current x position and y position		var xPos:Number = 0;		var yPos:Number = 0;				//starting timer		var startTimeTicks:int = 0;		var startTimer:Timer;				/**		* Fields		**/        private var hostName:String = "localhost"; //host name for socket        private var port:uint = 5204; //port number		private var m : MovieClip; //movie clip to move around				//create a cvManager to dispatch a whole blob event		private var cvManager : CVManager;				private var ihartCheck:CheckBox;		private var soundCheck:CheckBox;								//constructor...loads in the bitmap image		public function LightAndDark() {			loadingScreen.visible = false;						ihartCheck = new CheckBox();			ihartCheck.label="";			ihartCheck.x=50;			ihartCheck.y=415;			this.addChild(ihartCheck);						soundCheck = new CheckBox();			soundCheck.label="";			soundCheck.x=50;			soundCheck.y=445;			this.addChild(soundCheck);						startScreen.addEventListener(MouseEvent.CLICK, loadGame);		}				private function loadGame(e:MouseEvent):void{			this.removeChild(ihartCheck);			this.removeChild(soundCheck);			loadingScreen.visible = true;			startTimer = new Timer(1000);			startTimer.addEventListener(TimerEvent.TIMER, loadTick);			startTimer.start();		}				private function loadTick(t:TimerEvent):void{			startTimeTicks ++;						if(startTimeTicks>=3){								startTimer.stop();								startGame();			}		}				private function startGame():void{						setUpMousePosition();						manager = new GameManager(timer, !soundCheck.selected);										cvManager = new CVManager(hostName, port);			//we must add an event listener to the cv manager in order to know when			//we have received data						if(!ihartCheck.selected){				cvManager.addEventListener(CVEvent.FACE, getData);			}						trace("loading in the image");			var loader:Loader = new Loader();    		loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onComplete);	    	loader.load(new URLRequest("images/waldo.jpg"));					}		function onComplete (event:Event):void		{			trace("done loading bmp");					bitmapData = Bitmap(LoaderInfo(event.target).content).bitmapData;						theImage = new Bitmap(bitmapData);						//construct the black cover			blackCover = new Bitmap(new BitmapData(theImage.width,theImage.height,true,0xFF000000));									this.addChild(theImage);						randomPosition(strawberry);			randomPosition(panda);			randomPosition(waldo);			randomPosition(lamp);			trace("Header height = " + header.height);						this.addChild(strawberry);						this.addChild(panda);			this.addChild(waldo);			this.addChild(lamp);						manager.addHiddenObject(new HiddenObject(strawberry, "strawberry", 10));			manager.addHiddenObject(new HiddenObject(panda, "panda", 10));			manager.addHiddenObject(new HiddenObject(waldo, "waldo", 10));			manager.addHiddenObject(new HiddenObject(lamp, "lamp", 10));						manager.setObjectToFind(1);						this.addChild(blackCover);						rectangle.graphics.beginFill(0xFFFFFF); 			rectangle.graphics.drawRect(0, 0, stage.width, header.height); // (x spacing, y spacing, width, height)			rectangle.graphics.endFill();			this.addChild(rectangle);						this.addChild(header);						timer.x = stage.width/2;			timer.y = 0 + timer.height/2;			//timer.timerText.text = "0";			this.addChild(timer);						score.x = stage.width;			this.addChild(score);						myCheck = new CheckmarkFade();			myCheck.x = stage.width/2;			myCheck.y = stage.height/2;			stage.addChild(myCheck);			myCheck.gotoAndStop(30);						//setup the game timer			setupTimer();						loadingScreen.visible = false;		}				function randomPosition(object):void{			object.x = Math.random()*stage.width;			object.y = (Math.random() - header.height/stage.height)*stage.height + header.height;			trace(object + " = " + object.x + ", " + object.y);						if (object.x <= object.width/2){				object.x += (object.width/2);				trace("RESIZE X! " + object + " = " + object.x);			}			else if (object.x >= (stage.width - object.width/2)) {				object.x -= (object.width/2);				trace("RESIZE X! " + object + " = " + object.x);			}						if (object.y <= object.height/2 + header.height){				object.y += (object.height/2);				trace("RESIZE Y! " + object + " = " + object.y);			}			else if (object.y >= (stage.height - object.height/2 - header.height)) {				object.y -= (object.height/2);				trace("RESIZE Y! " + object + " = " + object.y);			}		}				private function setupTimer():void{			var myTimer:Timer = new Timer(500);			myTimer.addEventListener(TimerEvent.TIMER,handleTimerTick);			myTimer.start();		}				private function handleTimerTick(t:TimerEvent):void{			//trace("the timer ticked");			manager.gameManagerTick(xPos,yPos, this);			header.objectName.text = manager.getObjectToFindName();			score.score.text = ""+manager.getNumPoints();		}						private function makeAreaTransparent(x:int, y:int, radius:int){						resetBlackCover();						for(var i=x-radius; i<x+radius; i++){				for(var j=y-radius; j<y+radius; j++){																//blackCover.bitmapData.setPixel32(i,j,0x00000000);					blackCover.bitmapData.setPixel32(i,j,getTransparencyAmount(new Point(x,y), new Point(i,j),radius));									}			}					}				private function distance(point1:Point, point2:Point):uint{						return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y-point2.y,2));		}				private function getTransparencyAmount(point1:Point, point2:Point, radius:int):uint{									var base:String = "0x";						var foot:String = "000000";												var middleAsDecimal:int = Math.round((distance(point1,point2)/radius) * 255);			//var middleAsDecimal:int = 0;						if(middleAsDecimal > 255){				middleAsDecimal=255;			}						var c:String = middleAsDecimal.toString(16);						return uint(base + c + foot);		}				private function resetBlackCover():void{			this.removeChild(blackCover);			blackCover = new Bitmap(new BitmapData(theImage.width,theImage.height,true,0xFF000000));			this.addChild(blackCover);						this.removeChild(header);			this.removeChild(score);			this.removeChild(rectangle);			this.removeChild(timer);						this.addChild(rectangle);			this.addChild(header);			this.addChild(score);			this.addChild(timer);		}				public function playCheckMark():void{									myCheck.gotoAndPlay(1);		}					public function setUpMousePosition() {		stage.addEventListener(MouseEvent.MOUSE_MOVE, getCoordinates);		}		function getCoordinates(e:MouseEvent) {		xPos = e.stageX;		yPos = e.stageY;		makeAreaTransparent(xPos, yPos, 50);			}		/**		* CVEvent Listener getData get's the x and y coordinates from the		* CVEvent		**/		private function getData(e : CVEvent) : void{			trace("x: " + e.getX(0) + ", y: " + e.getY(0)); 			if(e.getX(0) > -1 && e.getY(0)>-1){				xPos = ((e.getX(0)-250)/550)*800;				yPos= (e.getY(0)/300)*500;								if(xPos < 0){					xPos*=-1;				}				if(yPos < 0){					yPos *=-1;				}				makeAreaTransparent(xPos, yPos, 50);			}		}		}}